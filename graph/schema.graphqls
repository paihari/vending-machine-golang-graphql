# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar JSON

type Federal {
  id: ID!
  uuid: String!
  name: String!
  fullName: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!

}

input NewFederal {
  name: String!
  fullName: String!
}

type CloudProvider {
  id: ID!
  uuid: String!
  name: String!
  fullName: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!

}

input NewCloudProvider {
  name: String!
  fullName: String!
}

type CloudEstate {
  id: ID!
  uuid: String!
  name: String!
  description: String!
  federal: String!
  cloudProvider: String!
  federalEmailAddress: String!
  cloudEstateCid: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!
}

input NewCloudEstate {
  name: String!
  description: String!
  federal: String!
  cloudProvider: String!
  federalEmailAddress: String!
  cloudEstateCid: String!
}


type CloudEstatePolicy {
  id: ID!
  uuid: String!
  name: String!
  description: String!
  cloudEstate: String!
  policyType: String!
  policyCid: String!
  policyJson: JSON!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!

}

input NewCloudEstatePolicyWithCid {
  name: String!
  description: String!
  cloudEstate: String!
  policyType: String!
  policyCid: String!
}

input NewCloudEstatePolicyWithJson {
  name: String!
  description: String!
  cloudEstate: String!
  policyType: String!
  policyJson: JSON!
}

type Client {
  id: ID!
  uuid: String!
  name: String!
  fullName: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!

}

input NewClient {
  name: String!
  fullName: String!
}


type Class {
  id: ID!
  uuid: String!
  name: String!
  description: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!

}

input NewClass {
  name: String!
  description: String!
}

type Stage {
  id: ID!
  uuid: String!
  name: String!
  description: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!

}

input NewStage {
  name: String!
  description: String!
}






type Resident {
  id: ID!
  name: String!
  description: String!
  purchaseOrderId: String!
  emailAddress: String!
  client: String!
  cloudProvider: String!
  residentCid: String!
  rootCid: String!
  class: String!
  stage: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String!
  updatedBy: String!
}

input NewResident {
  name: String!
  description: String!
  purchaseOrderId: String!
  emailAddress: String!
  clientName: String!
  cloudProviderName: String!
  className: String!
  stageName: String!
}



type Query {
  
  federals: [Federal!]!
  federalByUUID(uuid: String!): Federal
  federalByName(name: String!): Federal

  
  cloudProviders: [CloudProvider!]! 
  cloudProviderByUUID(uuid: String!): CloudProvider
  cloudProviderByName(name: String!): CloudProvider


  cloudEstates: [CloudEstate!]! 
  cloudEstateByUUID(uuid: String!): CloudEstate
  cloudEstateByName(name: String!): CloudEstate


  cloudEstatePolicys: [CloudEstatePolicy!]! 

  clients: [Client!]! 
  clientByName(name: String!): Client
  clientByUUID(uuid: String!): Client

  classes: [Class!]! 
  classByName(name: String!): Class
  classByUUID(uuid: String!): Class

  stages: [Stage!]! 
  stageByName(name: String!): Stage
  stageByUUID(uuid: String!): Stage


  residents: [Resident!]!
}

type Mutation {
  createFederal(input: NewFederal!): Federal!

  createCloudProvider(input: NewCloudProvider!): CloudProvider!

  createCloudEstate(input: NewCloudEstate!): CloudEstate!

  createCloudEstatePolicyWithCid(input: NewCloudEstatePolicyWithCid!): CloudEstatePolicy!

  createCloudEstatePolicyWithJson(input: NewCloudEstatePolicyWithJson!): CloudEstatePolicy!

  createClient(input: NewClient!): Client

  createClass(input: NewClass!): Class

  createStage(input: NewStage!): Stage

  createResident(input: NewResident!): Resident!

}
