package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"log"
	"os"

	pg "github.com/go-pg/pg/v10"
	"github.com/paihari/vending-machine-golang-graphql/awscompose"
	"github.com/paihari/vending-machine-golang-graphql/base"
	"github.com/paihari/vending-machine-golang-graphql/graph/model"
)

// CreateFederal is the resolver for the createFederal field.
func (r *mutationResolver) CreateFederal(ctx context.Context, input model.NewFederal) (*model.Federal, error) {
	federal := model.Federal{
		Name:     input.Name,
		FullName: input.FullName,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&federal).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Federal: %v", error)
	}

	return &federal, nil
}

// CreateCloudProvider is the resolver for the createCloudProvider field.
func (r *mutationResolver) CreateCloudProvider(ctx context.Context, input model.NewCloudProvider) (*model.CloudProvider, error) {
	cloudProvider := model.CloudProvider{
		Name:     input.Name,
		FullName: input.FullName,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&cloudProvider).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Cloud Provider: %v", error)
	}

	return &cloudProvider, nil
}

// CreateCloudEstate is the resolver for the createCloudEstate field.
func (r *mutationResolver) CreateCloudEstate(ctx context.Context, input model.NewCloudEstate) (*model.CloudEstate, error) {
	db := base.GetDb()
	defer db.Close()

	federal := base.GetFederalByName(input.Federal, db)
	cloudProvider := base.GetCloudProviderByName(input.CloudProvider, db)

	cloudEstate := model.CloudEstate{
		Name:                input.Name,
		Description:         input.Description,
		Federal:             federal.Name,
		CloudProvider:       cloudProvider.Name,
		FederalEmailAddress: input.FederalEmailAddress,
		CloudEstateCid:      input.CloudEstateCid,
	}

	_, error := db.Model(&cloudEstate).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Cloud Estate: %v", error)
	}

	return &cloudEstate, nil
}

// CreateCloudEstatePolicyWithCid is the resolver for the createCloudEstatePolicyWithCid field.
func (r *mutationResolver) CreateCloudEstatePolicyWithCid(ctx context.Context, input model.NewCloudEstatePolicyWithCid) (*model.CloudEstatePolicy, error) {
	db := base.GetDb()
	defer db.Close()

	cloudEstate := base.GetCloudEstateByName(input.CloudEstate, db)
	fmt.Println(cloudEstate)

	cloudEstatePolicy := model.CloudEstatePolicy{
		Name:        input.Name,
		Description: input.Description,
		CloudEstate: cloudEstate.Name,
		PolicyType:  input.PolicyType,
		PolicyCid:   input.PolicyCid,
	}

	_, error := db.Model(&cloudEstatePolicy).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Cloud Estate Policy: %v", error)
	}

	return &cloudEstatePolicy, nil
}

// CreateCloudEstatePolicyWithJSON is the resolver for the createCloudEstatePolicyWithJson field.
func (r *mutationResolver) CreateCloudEstatePolicyWithJSON(ctx context.Context, input model.NewCloudEstatePolicyWithJSON) (*model.CloudEstatePolicy, error) {
	db := base.GetDb()
	defer db.Close()

	cloudEstate := base.GetCloudEstateByName(input.CloudEstate, db)

	cloudEstatePolicy := model.CloudEstatePolicy{
		Name:        input.Name,
		Description: input.Description,
		CloudEstate: cloudEstate.Name,
		PolicyType:  input.PolicyType,
		PolicyJSON:  input.PolicyJSON,
	}

	_, error := db.Model(&cloudEstatePolicy).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Cloud Estate Policy: %v", error)
	}

	return &cloudEstatePolicy, nil
}

// CreateRenter is the resolver for the createRenter field.
func (r *mutationResolver) CreateRenter(ctx context.Context, input model.NewRenter) (*model.Renter, error) {
	db := base.GetDb()
	defer db.Close()

	renter := model.Renter{
		Name:     input.Name,
		FullName: input.FullName,
	}

	_, error := db.Model(&renter).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Renter : %v", error)
	}
	return &renter, nil
}

// CreateClass is the resolver for the createClass field.
func (r *mutationResolver) CreateClass(ctx context.Context, input model.NewClass) (*model.Class, error) {
	db := base.GetDb()
	defer db.Close()

	class := model.Class{
		Name:        input.Name,
		Description: input.Description,
	}

	_, error := db.Model(&class).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Class : %v", error)
	}

	return &class, nil
}

// CreateStage is the resolver for the createStage field.
func (r *mutationResolver) CreateStage(ctx context.Context, input model.NewStage) (*model.Stage, error) {
	db := base.GetDb()
	defer db.Close()

	stage := model.Stage{
		Name:        input.Name,
		Description: input.Description,
	}

	_, error := db.Model(&stage).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Stage : %v", error)
	}

	return &stage, nil
}

// CreateResident is the resolver for the createResident field.
func (r *mutationResolver) CreateResident(ctx context.Context, input model.NewResident) (*model.Resident, error) {
	db := base.GetDb()
	defer db.Close()

	cloudEstate := base.GetCloudEstateByName(*input.CloudEstate, db)

	cloudProvider := base.GetCloudProviderByName(cloudEstate.CloudProvider, db)
	
	renter := base.GetRenterByName(input.Renter, db)

	stage := base.GetStageByName(input.Stage, db)

	class := base.GetClassByName(input.Class, db)

	policies := base.GetCloudEstatePoliciesByName(input.CloudEstatePolicies, db)

	for _, policy := range policies {
		fmt.Println(*policy)
	}

	var createdBy, updatedBy string
	createdBy = "VEND"
	updatedBy = "VEND"

	residentCid, err := awscompose.CreateResidentAccount(input.Name, input.EmailAddress)
	if err != nil {

		log.Fatalf("Unable to Create Resident/account %v", err)
		return nil, err
	}

	//residentCid := "161987549706"

	policyStrings := make([]*string, len(policies))
	for i, policy := range policies {
		policyStrings[i] = &policy.Name
		awscompose.AttachFederationTagPolicyToResidentAccount(policy.PolicyCid, residentCid)
	}

	resident := model.Resident{
		Name:           input.Name,
		Description:    input.Description,
		PurchaseOrder:  input.PurchaseOrder,
		EmailAddress:   input.EmailAddress,
		Renter:         renter.Name,
		CloudProvider:  cloudProvider.Name,
		ResidentCid:    residentCid,
		CloudEstate:    cloudEstate.Name,
		CloudEstateCid: cloudEstate.CloudEstateCid,
		Class:     class.Name,
		Stage:     stage.Name,
		CreatedBy: createdBy,
		UpdatedBy: updatedBy,
	}

	_, error := db.Model(&resident).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Resident: %v", error)
	}

	return &resident, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	db := base.GetDb()
	defer db.Close()

	resident := base.GetResidentByName(input.Resident, db)

	tag := base.GetTagByName("FINANCE", db)
	

	userCid, err := awscompose.CreateIAMUserInChildAccount(resident.ResidentCid, input.Name, tag.Tag)
	if err != nil {

		log.Fatalf("Unable to Create User %v", err)
		return nil, err
	}

	fmt.Println(userCid)

	var createdBy, updatedBy string
	createdBy = "VEND"

	user := model.User{
		Name:        input.Name,
		Description: input.Description,
		Resident:    resident.Name,
		UserCid:     userCid,
		CreatedBy:   createdBy,
		UpdatedBy:   updatedBy,
	}

	_, error := db.Model(&user).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new User: %v", error)
	}
	return &user, nil
}

// Federals is the resolver for the federals field.
func (r *queryResolver) Federals(ctx context.Context) ([]*model.Federal, error) {
	var federals []*model.Federal

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&federals).Select()
	if error != nil {
		return nil, error
	}

	return federals, nil
}

// FederalByUUID is the resolver for the federalByUUID field.
func (r *queryResolver) FederalByUUID(ctx context.Context, uuid string) (*model.Federal, error) {
	db := base.GetDb()
	defer db.Close()

	federal := base.GetFederalByUUID(uuid, db)
	return &federal, nil
}

// FederalByName is the resolver for the federalByName field.
func (r *queryResolver) FederalByName(ctx context.Context, name string) (*model.Federal, error) {
	db := base.GetDb()
	defer db.Close()

	federal := base.GetFederalByName(name, db)
	return &federal, nil
}

// CloudProviders is the resolver for the cloudProviders field.
func (r *queryResolver) CloudProviders(ctx context.Context) ([]*model.CloudProvider, error) {
	var cloudProviders []*model.CloudProvider

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&cloudProviders).Select()
	if error != nil {
		return nil, error
	}

	return cloudProviders, nil
}

// CloudProviderByUUID is the resolver for the cloudProviderByUUID field.
func (r *queryResolver) CloudProviderByUUID(ctx context.Context, uuid string) (*model.CloudProvider, error) {
	db := base.GetDb()
	defer db.Close()

	cloudProvider := base.GetCloudProviderByName(uuid, db)
	return &cloudProvider, nil
}

// CloudProviderByName is the resolver for the cloudProviderByName field.
func (r *queryResolver) CloudProviderByName(ctx context.Context, name string) (*model.CloudProvider, error) {
	db := base.GetDb()
	defer db.Close()

	cloudProvider := base.GetCloudProviderByName(name, db)
	return &cloudProvider, nil
}

// CloudEstates is the resolver for the cloudEstates field.
func (r *queryResolver) CloudEstates(ctx context.Context) ([]*model.CloudEstate, error) {
	var cloudEstates []*model.CloudEstate

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&cloudEstates).Select()
	if error != nil {
		return nil, error
	}

	return cloudEstates, nil
}

// CloudEstateByUUID is the resolver for the cloudEstateByUUID field.
func (r *queryResolver) CloudEstateByUUID(ctx context.Context, uuid string) (*model.CloudEstate, error) {
	db := base.GetDb()
	defer db.Close()

	cloudEstate := base.GetCloudEstateByUUID(uuid, db)
	return &cloudEstate, nil
}

// CloudEstateByName is the resolver for the cloudEstateByName field.
func (r *queryResolver) CloudEstateByName(ctx context.Context, name string) (*model.CloudEstate, error) {
	db := base.GetDb()
	defer db.Close()

	cloudEstate := base.GetCloudEstateByName(name, db)
	return &cloudEstate, nil
}

// CloudEstatePolicys is the resolver for the cloudEstatePolicys field.
func (r *queryResolver) CloudEstatePolicys(ctx context.Context) ([]*model.CloudEstatePolicy, error) {
	var cloudEstatePolicys []*model.CloudEstatePolicy

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&cloudEstatePolicys).Select()
	if error != nil {
		return nil, error
	}

	return cloudEstatePolicys, nil
}

// Renters is the resolver for the renters field.
func (r *queryResolver) Renters(ctx context.Context) ([]*model.Renter, error) {
	var renters []*model.Renter

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&renters).Select()
	if error != nil {
		return nil, error
	}

	return renters, nil
}

// RenterByName is the resolver for the renterByName field.
func (r *queryResolver) RenterByName(ctx context.Context, name string) (*model.Renter, error) {
	db := base.GetDb()
	defer db.Close()

	renter := base.GetRenterByName(name, db)
	return &renter, nil
}

// RenterByUUID is the resolver for the renterByUUID field.
func (r *queryResolver) RenterByUUID(ctx context.Context, uuid string) (*model.Renter, error) {
	db := base.GetDb()
	defer db.Close()

	client := base.GetRenterByUUID(uuid, db)
	return &client, nil
}

// Classes is the resolver for the classes field.
func (r *queryResolver) Classes(ctx context.Context) ([]*model.Class, error) {
	var classes []*model.Class

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&classes).Select()
	if error != nil {
		return nil, error
	}

	return classes, nil
}

// ClassByName is the resolver for the classByName field.
func (r *queryResolver) ClassByName(ctx context.Context, name string) (*model.Class, error) {
	db := base.GetDb()
	defer db.Close()

	class := base.GetClassByName(name, db)
	return &class, nil
}

// ClassByUUID is the resolver for the classByUUID field.
func (r *queryResolver) ClassByUUID(ctx context.Context, uuid string) (*model.Class, error) {
	db := base.GetDb()
	defer db.Close()

	class := base.GetClassByUUID(uuid, db)
	return &class, nil
}

// Stages is the resolver for the stages field.
func (r *queryResolver) Stages(ctx context.Context) ([]*model.Stage, error) {
	var stages []*model.Stage

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&stages).Select()
	if error != nil {
		return nil, error
	}

	return stages, nil
}

// StageByName is the resolver for the stageByName field.
func (r *queryResolver) StageByName(ctx context.Context, name string) (*model.Stage, error) {
	db := base.GetDb()
	defer db.Close()

	stage := base.GetStageByName(name, db)
	return &stage, nil
}

// StageByUUID is the resolver for the stageByUUID field.
func (r *queryResolver) StageByUUID(ctx context.Context, uuid string) (*model.Stage, error) {
	db := base.GetDb()
	defer db.Close()

	stage := base.GetStageByUUID(uuid, db)
	return &stage, nil
}

// Residents is the resolver for the residents field.
func (r *queryResolver) Residents(ctx context.Context) ([]*model.Resident, error) {
	var residents []*model.Resident

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&residents).Select()
	if error != nil {
		return nil, error
	}

	return residents, nil
}

// ResidentByName is the resolver for the residentByName field.
func (r *queryResolver) ResidentByName(ctx context.Context, name string) (*model.Resident, error) {
	db := base.GetDb()
	defer db.Close()

	resident := base.GetResidentByName(name, db)
	return &resident, nil

}

// ResidentByUUID is the resolver for the residentByUUID field.
func (r *queryResolver) ResidentByUUID(ctx context.Context, uuid string) (*model.Resident, error) {
	db := base.GetDb()
	defer db.Close()

	resident := base.GetResidentByUUID(uuid, db)
	return &resident, nil

}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&users).Select()
	if error != nil {
		return nil, error
	}

	return users, nil
}

// UserByName is the resolver for the userByName field.
func (r *queryResolver) UserByName(ctx context.Context, name string) (*model.User, error) {
	db := base.GetDb()
	defer db.Close()

	user := base.GetUserByName(name, db)
	return &user, nil

}

// UserByUUID is the resolver for the userByUUID field.
func (r *queryResolver) UserByUUID(ctx context.Context, uuid string) (*model.User, error) {
	db := base.GetDb()
	defer db.Close()

	user := base.GetUserByUUID(uuid, db)
	return &user, nil

}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*model.Tag, error) {
	var tags []*model.Tag

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&tags).Select()
	if error != nil {
		return nil, error
	}

	return tags, nil

}

// TagByName is the resolver for the tagByName field.
func (r *queryResolver) TagByName(ctx context.Context, name string) (*model.Tag, error) {
	panic(fmt.Errorf("not implemented: TagByName - tagByName"))
}

// TagByUUID is the resolver for the tagByUUID field.
func (r *queryResolver) TagByUUID(ctx context.Context, uuid string) (*model.Tag, error) {
	panic(fmt.Errorf("not implemented: TagByUUID - tagByUUID"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
